Функция ПолучитьСписокТелефонов()
    Перем ЛогСообщение;
    Результат = Новый Структура("new,used", Новый Массив, Новый Массив);

    Попытка
        // Получаем группы через иерархию
        ГруппаNewIPhone = НайтиГруппуЧерезИерархию("New iPhone");
        ГруппаUsedIPhone = НайтиГруппуЧерезИерархию("Used iPhone");

        Если ГруппаNewIPhone = Неопределено Или ГруппаUsedIPhone = Неопределено Тогда
            ВызватьИсключение "Не найдены группы: " +
                            ?(ГруппаNewIPhone = Неопределено, "New iPhone", "") +
                            ?(ГруппаUsedIPhone = Неопределено, ?(ГруппаNewIPhone = Неопределено, ", ", "") + "Used iPhone", "");
        КонецЕсли;

        // Формируем массив ссылок на группы
        МассивГрупп = Новый Массив;
        МассивГрупп.Добавить(ГруппаNewIPhone);
        МассивГрупп.Добавить(ГруппаUsedIPhone);

        // Основной запрос без фильтрации по остаткам
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ
        |   Номенклатура.Ссылка КАК Ссылка,
        |   Номенклатура.Наименование КАК Наименование,
        |   Номенклатура.Родитель КАК Родитель
        |ИЗ
        |   Справочник.Номенклатура КАК Номенклатура
        |ГДЕ
        |   Номенклатура.Родитель В(&МассивГрупп)
        |   И Номенклатура.ЭтоГруппа = ЛОЖЬ
        |   И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
        |   И Номенклатура.КатегорияНоменклатуры.Наименование = &Категория";

        Запрос.УстановитьПараметр("МассивГрупп", МассивГрупп);
        Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
        Запрос.УстановитьПараметр("Категория", "Смартфоны");

        Выборка = Запрос.Выполнить().Выбрать();

        Пока Выборка.Следующий() Цикл
            Если Выборка.Родитель = ГруппаNewIPhone Тогда
                Результат.new.Добавить(Выборка.Ссылка);
            ИначеЕсли Выборка.Родитель = ГруппаUsedIPhone Тогда
                Результат.used.Добавить(Выборка.Ссылка);
            КонецЕсли;
        КонецЦикла;

        // Фильтрация по остаткам
        Результат.new = ФильтроватьПоОстаткам(Результат.new);
        Результат.used = ФильтроватьПоОстаткам(Результат.used);

        // Преобразуем ссылки обратно в наименования
        Результат.new = ПреобразоватьСсылкиВНаименования(Результат.new);
        Результат.used = ПреобразоватьСсылкиВНаименования(Результат.used);

        ЗаписьЖурналаРегистрации("Найдено новых iPhone: " + Результат.new.Количество() + ", подержанных: " + Результат.used.Количество(),
                                УровеньЖурналаРегистрации.Информация);

    Исключение
        ЗаписьЖурналаРегистрации("Ошибка при получении списка телефонов: " + ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
        ВызватьИсключение;
    КонецПопытки;

    Возврат Результат;
КонецФункции

Функция ФильтроватьПоОстаткам(МассивСсылок)
    Результат = Новый Массив;

    Для Каждого Ссылка Из МассивСсылок Цикл
        Если ЕстьОстатки(Ссылка) Тогда
            Результат.Добавить(Ссылка);
        КонецЕсли;
    КонецЦикла;

    Возврат Результат;
КонецФункции

Функция ЕстьОстатки(СсылкаНоменклатуры)

    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |   СУММА(ОстаткиТоваров.Количество) КАК Количество
    |ИЗ
    |   РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
    |ГДЕ
    |   ОстаткиТоваров.Номенклатура = &Ссылка
    |   И ОстаткиТоваров.Количество > 0";

    Запрос.УстановитьПараметр("Ссылка", СсылкаНоменклатуры);

    Результат = Запрос.Выполнить().Выбрать();

    Попытка
        Если Результат.Следующий() Тогда
            // Явное преобразование и проверка на NULL
            КоличествоОстатков = ?(Результат.Количество = Неопределено, 0, Число(Результат.Количество));
            Возврат КоличествоОстатков > 0;
        КонецЕсли;
    Исключение
        ЗаписьЖурналаРегистрации("Ошибка при проверке остатков: " + ОписаниеОшибки(),
                                УровеньЖурналаРегистрации.Ошибка);
        Возврат Ложь;
    КонецПопытки;

    Возврат Ложь;

КонецФункции

Функция ПреобразоватьСсылкиВНаименования(МассивСсылок)
    Результат = Новый Массив;

    Для Каждого Ссылка Из МассивСсылок Цикл
        Результат.Добавить(Ссылка.Наименование);
    КонецЦикла;

    Возврат Результат;
КонецФункции

Функция НайтиГруппуЧерезИерархию(НаименованиеГруппы)
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |   ИерархияНоменклатуры.Номенклатура КАК Ссылка
    |ИЗ
    |   РегистрСведений.ИерархияНоменклатуры КАК ИерархияНоменклатуры
    |ГДЕ
    |   ИерархияНоменклатуры.Номенклатура.Наименование = &Наименование
    |   И ИерархияНоменклатуры.Номенклатура.ЭтоГруппа = ИСТИНА";

    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);

    Результат = Запрос.Выполнить().Выбрать();
    Если Результат.Следующий() Тогда
        Возврат Результат.Ссылка;
    КонецЕсли;

    Возврат Неопределено;
КонецФункции

Функция PhonesGet(Запрос)
	Отладка();
    ДанныеТелефонов = Неопределено;
    Успех = Ложь;
    ТекстОшибки = "";

    Попытка
        ДанныеТелефонов = ПолучитьСписокТелефонов();
        Успех = Истина;
    Исключение
        ТекстОшибки = ОписаниеОшибки();
        ДанныеТелефонов = Новый Структура("new,used", Новый Массив, Новый Массив);
    КонецПопытки;

    Ответ = Новый Структура;
    Ответ.Вставить("success", Успех);
    Ответ.Вставить("error", ?(Успех, Неопределено, ТекстОшибки));
    Ответ.Вставить("data", ДанныеТелефонов);

    JSONОтвет = ЗаписьJSON(Ответ);

    HTTPОтвет = Новый HTTPСервисОтвет(?(Успех, 200, 500));
    HTTPОтвет.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
    HTTPОтвет.УстановитьТелоИзСтроки(JSONОтвет);

    Возврат HTTPОтвет;
КонецФункции

