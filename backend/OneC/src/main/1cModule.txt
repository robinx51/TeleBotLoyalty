
// Обработчики
Функция CustomerPost(Запрос)
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Попытка
        Данные = ЧтениеJSON(ТелоЗапроса);
    Исключение
        Ответ = Новый HTTPСервисОтвет(400, "Incorrect JSON format");
        Возврат Ответ;
    КонецПопытки;

    // Проверка обязательных полей
    Если Не Данные.Свойство("fullName") Или Не Данные.Свойство("phone") Тогда
        Ответ = Новый HTTPСервисОтвет(400, "Обязательные поля: fullName, phone");
        Возврат Ответ;
    КонецЕсли;

    // Создаем структуру для контакта с Telegram username
    ПараметрыКонтакт = Новый Структура;
    ПараметрыКонтакт.Вставить("Имя", Данные.fullName);
    ПараметрыКонтакт.Вставить("Никнейм", Данные.username);

    Если Данные.Свойство("username") Тогда
        ПараметрыКонтакт.Вставить("ИдКонтакта", Данные.username);
        ПараметрыКонтакт.Вставить("Заметки", "Telegram: @" + Данные.username);
    Иначе
        ПараметрыКонтакт.Вставить("ИдКонтакта", "");
        ПараметрыКонтакт.Вставить("Заметки", "");
	КонецЕсли;

    // Создаем/находим контакт
    Контакт = Неопределено;
    Попытка
        Контакт = НайтиСоздатьКонтакт(ПараметрыКонтакт);
    Исключение
        ЗаписьЖурналаРегистрации("Ошибка создания контакта: " + ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
        Ответ = Новый HTTPСервисОтвет(500, "Ошибка создания контакта");
        Возврат Ответ;
    КонецПопытки;

    // Модификация контрагента
	ВидКонтрагентаФизЛицо = Перечисления.ВидыКонтрагентов.ФизическоеЛицо;
	ГруппаДоступаКлиентскаяБаза = НайтиГруппуДоступа("Клиентская база");

    Покупатель = НайтиСоздатьКонтрагента(Контакт, Данные.phone, Неопределено);

    Если Покупатель <> Неопределено И Покупатель.Контрагент <> Неопределено Тогда
        Попытка
            КонтрагентОбъект = Покупатель.Контрагент.ПолучитьОбъект();

			КонтрагентОбъект.НаименованиеПолное = Данные.fullName;
			КонтрагентОбъект.ВидКонтрагента = ВидКонтрагентаФизЛицо;
			КонтрагентОбъект.ГруппаДоступа = ГруппаДоступаКлиентскаяБаза;
            КонтрагентОбъект.Покупатель = Истина;
            КонтрагентОбъект.Комментарий = "Telegram: @" + Данные.username;

			КонтрагентОбъект.Записать();
        Исключение
            ЗаписьЖурналаРегистрации("Ошибка обновления контрагента: " + ОписаниеОшибки(),
                                    УровеньЖурналаРегистрации.Ошибка);
        КонецПопытки;
    КонецЕсли;

	// Ответ
    ОтветДанные = Новый Структура;
    ОтветДанные.Вставить("Success", Истина);

    Если Покупатель <> Неопределено Тогда
        Если Покупатель.Контрагент <> Неопределено Тогда
            ДанныеКонтрагента = Новый Структура;
            ДанныеКонтрагента.Вставить("FullName", Покупатель.Контрагент.Наименование);
            Попытка
                ДанныеКонтрагента.Вставить("Url", Строка(Покупатель.Контрагент.УникальныйИдентификатор()));
            Исключение
                ДанныеКонтрагента.Вставить("Url", "");
            КонецПопытки;
            ОтветДанные.Вставить("Counteragent", ДанныеКонтрагента);
        КонецЕсли;
    КонецЕсли;

	Попытка
        JSONОтвет = ЗаписьJSON(ОтветДанные);
    Исключение
        ЗаписьЖурналаРегистрации("Ошибка сериализации JSON: " + ОписаниеОшибки(), УровеньЖурналаРегистрации.Ошибка);
        Ответ = Новый HTTPСервисОтвет(500, "Ошибка формирования ответа");
        Возврат Ответ;
    КонецПопытки;

    Ответ = Новый HTTPСервисОтвет(200);
    Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(JSONОтвет);
    Возврат Ответ;
КонецФункции

Функция PingGet(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("Working");
	Возврат Ответ;
КонецФункции

Функция PhonesGet(Запрос)
	ДанныеТелефонов = Неопределено;
    Успех = Ложь;
    ТекстОшибки = "";
    
    Попытка
        ДанныеТелефонов = ПолучитьСписокТелефонов();
        Успех = Истина;
    Исключение
        ТекстОшибки = ОписаниеОшибки();
        ДанныеТелефонов = Новый Массив;
    КонецПопытки;
    
    Ответ = Новый Структура;
    Ответ.Вставить("success", Успех);
    Ответ.Вставить("error", ?(Успех, Неопределено, ТекстОшибки));
    Ответ.Вставить("data", ДанныеТелефонов);
    
    JSONОтвет = ЗаписьJSON(Ответ);
    
    HTTPОтвет = Новый HTTPСервисОтвет(?(Успех, 200, 500));
    HTTPОтвет.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
    HTTPОтвет.УстановитьТелоИзСтроки(JSONОтвет);
    
    Возврат HTTPОтвет;
КонецФункции


// Контрагенты
Функция НайтиСоздатьКонтакт(Параметры)
	ИсточникПривлечения = "Telegram";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
	|	КонтактныеЛицаКонтактнаяИнформация.Значение КАК Значение,
	|	КонтактныеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Тип = &Тип
	|	И КонтактныеЛицаКонтактнаяИнформация.Вид = &Вид
	|	И ПОДСТРОКА(КонтактныеЛицаКонтактнаяИнформация.Ссылка.Комментарий, 1, 30) = &Заметки";

	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Другое);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица);
	Запрос.УстановитьПараметр("ДоменноеИмяСервера", ИсточникПривлечения);
	Запрос.УстановитьПараметр("Заметки", Параметры.ИдКонтакта);//Формат(ПоляЧата.Получить("id"),"ЧГ=0"));

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Количество() = 0 Тогда

		Контакт = Справочники.КонтактныеЛица.СоздатьЭлемент();
		Контакт.Наименование = Параметры.Имя;
		Контакт.Комментарий = Параметры.ИдКонтакта;

		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(Контакт, ИсточникПривлечения + ": @" + Параметры.Никнейм,
			Справочники.ВидыКонтактнойИнформации.МессенджерКонтактногоЛица, ТекущаяДатаСеанса(), Истина);

		Попытка
			Контакт.Записать();

			Возврат Контакт.Ссылка;
		Исключение
		КонецПопытки;

	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

Функция НайтиСоздатьКонтрагента(Контакт, Телефон, ДокументОбъект)

	ПокупательСсылка = КонтактнаяИнформацияУНФ.КонтрагентПоНомеруТелефона(Телефон); //, Истина, Ложь, Ложь);
	ДоговорПоУмолчанию = Неопределено;
	СтруктураВозврата = Новый Структура;

	Если ПокупательСсылка = Неопределено Тогда
		СтруктураВозврата = СоздатьКонтрагентаДоговор(Контакт, Телефон, ДокументОбъект);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ПокупательСсылка);
		СтруктураВозврата.Вставить("Контрагент", ПокупательСсылка);
		СтруктураВозврата.Вставить("Договор", ДоговорПоУмолчанию);
	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиКонтрагентКонтактСрезПоследних.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних КАК СвязиКонтрагентКонтактСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентКонтактСрезПоследних.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент
		|ГДЕ
		|	СвязиКонтрагентКонтактСрезПоследних.Контакт = &Контакт
		|	И НЕ СвязиКонтрагентКонтактСрезПоследних.СвязьНедействительна
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СПокупателем)
		|	И СвязиКонтрагентКонтактСрезПоследних.Контрагент.КонтактноеЛицо = &Контакт";
		Запрос.УстановитьПараметр("Контакт", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда

			СтруктураВозврата = СоздатьКонтрагентаДоговор(Контакт, Телефон, ДокументОбъект);

		Иначе

			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
				СтруктураВозврата.Вставить("Договор", Выборка.Договор);
				Прервать;
			КонецЦикла;

		КонецЕсли;

		Если ПокупательСсылка <> Контакт Тогда
			 РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(Выборка.Контрагент, Контакт);
		КонецЕсли;

	ИначеЕсли ТипЗнч(ПокупательСсылка) = Тип("СправочникСсылка.Лиды") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиКонтрагентЛид.Контрагент КАК Контрагент,
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.СвязиКонтрагентЛид КАК СвязиКонтрагентЛид
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО СвязиКонтрагентЛид.Контрагент = ОсновныеДоговорыКонтрагента.Договор
		|ГДЕ
		|	СвязиКонтрагентЛид.Лид = &Лид";
		Запрос.УстановитьПараметр("Лид", ПокупательСсылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураВозврата.Вставить("Контрагент", Выборка.Контрагент);
			СтруктураВозврата.Вставить("Договор", Выборка.Договор);
			Прервать;
		КонецЦикла;

		РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(Выборка.Контрагент, Контакт);

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции

Функция СоздатьКонтрагентаДоговор(Контакт, Телефон, ДокументОбъект)

	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();

	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Наименование", Контакт.Наименование);
	СтруктураЗаполнения.Вставить("НомерТелефона", Телефон);

	КонтрагентОбъект.Заполнить(СтруктураЗаполнения);
	КонтрагентОбъект.Покупатель = Истина;
	КонтрагентОбъект.КонтактноеЛицо = Контакт;
	КонтрагентОбъект.Записать();
	ПокупательСсылка = КонтрагентОбъект.Ссылка;

	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПокупателем);
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПоКонтрагентуПоОрганизации(КонтрагентОбъект.Ссылка,
		Справочники.Организации.ОсновнаяОрганизация, СписокВидовДоговора);
	Если Не ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда

		Договор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Договор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
		Договор.Организация = ДокументОбъект.Организация;
		Договор.ВидДоговора = Перечисления.ВидыДоговоров.СПокупателем;
		Договор.ВидЦен = ДокументОбъект.ВидЦен;
		Договор.Владелец = КонтрагентОбъект.Ссылка;
		Договор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		Договор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		Если ПустаяСтрока(Договор.Наименование) Тогда
			Договор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(Договор);
		КонецЕсли;
		Договор.Записать();
		ДоговорПоУмолчанию = Договор.Ссылка;

		Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(Договор);

	КонецЕсли;

	//УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПокупательСсылка, Телефон,
	//	Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, ТекущаяДатаСеанса(), Истина);

	РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(ПокупательСсылка, Контакт);

	Возврат Новый Структура("Контрагент, Договор", ПокупательСсылка, ДоговорПоУмолчанию);

КонецФункции

Функция НайтиГруппуДоступа(НаименованиеГруппы)
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |   ГруппыДоступаКонтрагентов.Ссылка КАК Ссылка
    |ИЗ
    |   Справочник.ГруппыДоступаКонтрагентов КАК ГруппыДоступаКонтрагентов
    |ГДЕ
    |   ГруппыДоступаКонтрагентов.Наименование = &Наименование";

    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
    Результат = Запрос.Выполнить().Выбрать();

    Если Результат.Следующий() Тогда
        Возврат Результат.Ссылка;
    КонецЕсли;

    Возврат Неопределено;
КонецФункции

// Телефоны
Функция ПолучитьСписокТелефонов()
    Результат = Новый Структура("new,used", Новый Массив, Новый Массив);
    
    Попытка
        // Получаем группы через иерархию
        ГруппаNewIPhone = НайтиГруппуЧерезИерархию("New iPhone");
        ГруппаUsedIPhone = НайтиГруппуЧерезИерархию("Used iPhone");
        
        Если ГруппаNewIPhone = Неопределено Или ГруппаUsedIPhone = Неопределено Тогда
            ВызватьИсключение "Не найдены группы: " +
                            ?(ГруппаNewIPhone = Неопределено, "New iPhone", "") +
                            ?(ГруппаUsedIPhone = Неопределено, ?(ГруппаNewIPhone = Неопределено, ", ", "") + "Used iPhone", "");
        КонецЕсли;
        
        // Основной запрос с детализацией
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ
        |   Номенклатура.Ссылка КАК Ссылка,
        |   Номенклатура.Наименование КАК Наименование,
        |   Номенклатура.Родитель КАК Родитель
        |ИЗ
        |   Справочник.Номенклатура КАК Номенклатура
        |ГДЕ
        |   Номенклатура.Родитель В(&МассивГрупп)
        |   И Номенклатура.ЭтоГруппа = ЛОЖЬ
        |   И Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
        |   И Номенклатура.КатегорияНоменклатуры.Наименование = &Категория";
        
        МассивГрупп = Новый Массив;
        МассивГрупп.Добавить(ГруппаNewIPhone);
        МассивГрупп.Добавить(ГруппаUsedIPhone);
        
        Запрос.УстановитьПараметр("МассивГрупп", МассивГрупп);
        Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
        Запрос.УстановитьПараметр("Категория", "Смартфоны");
        
        Выборка = Запрос.Выполнить().Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Если Не ЕстьОстатки(Выборка.Ссылка) Тогда
                Продолжить;
            КонецЕсли;
            
            Телефон = Новый Структура;
            Телефон.Вставить("phone", Выборка.Наименование);
            
            // Получаем розничную цену
            Телефон.Вставить("price", ПолучитьРозничнуюЦену(Выборка.Ссылка));
            
            // Получаем список характеристик (цветов)
            Телефон.Вставить("color", ПолучитьХарактеристики(Выборка.Ссылка));
            
            // Добавляем в соответствующую группу
            Если Выборка.Родитель = ГруппаNewIPhone Тогда
                Результат.new.Добавить(Телефон);
            ИначеЕсли Выборка.Родитель = ГруппаUsedIPhone Тогда
                Результат.used.Добавить(Телефон);
            КонецЕсли;
        КонецЦикла;
        
        ЗаписьЖурналаРегистрации(
            "Найдено новых iPhone: " + Результат.new.Количество() + 
            ", подержанных: " + Результат.used.Количество(), 
            УровеньЖурналаРегистрации.Информация);
        
    Исключение
        ЗаписьЖурналаРегистрации(
            "Ошибка при получении списка телефонов: " + ОписаниеОшибки(), 
            УровеньЖурналаРегистрации.Ошибка);
        ВызватьИсключение;
    КонецПопытки;
    
    Возврат Результат;
КонецФункции

Функция НайтиГруппуЧерезИерархию(НаименованиеГруппы)
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ
    |   ИерархияНоменклатуры.Номенклатура КАК Ссылка
    |ИЗ
    |   РегистрСведений.ИерархияНоменклатуры КАК ИерархияНоменклатуры
    |ГДЕ
    |   ИерархияНоменклатуры.Номенклатура.Наименование = &Наименование
    |   И ИерархияНоменклатуры.Номенклатура.ЭтоГруппа = ИСТИНА";

    Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);

    Результат = Запрос.Выполнить().Выбрать();
    Если Результат.Следующий() Тогда
        Возврат Результат.Ссылка;
    КонецЕсли;

    Возврат Неопределено;
КонецФункции

Функция ЕстьОстатки(СсылкаНоменклатуры)
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ОстаткиТоваров.Количество
    |ИЗ
    |   РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
    |ГДЕ
    |   ОстаткиТоваров.Номенклатура = &Ссылка
    |   И ОстаткиТоваров.Количество > 0";
    
    Запрос.УстановитьПараметр("Ссылка", СсылкаНоменклатуры);
    
    Возврат Запрос.Выполнить().Выбрать().Следующий();
КонецФункции 

Функция ПолучитьРозничнуюЦену(СсылкаНоменклатуры)
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ЦеныНоменклатуры.Цена КАК Цена
    |ИЗ
    |   РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
    |       , 
    |       Номенклатура = &Номенклатура
    |       И ВидЦен.Наименование = &ВидЦен) КАК ЦеныНоменклатуры";
    
    Запрос.УстановитьПараметр("Номенклатура", СсылкаНоменклатуры);
    Запрос.УстановитьПараметр("ВидЦен", "Розничная цена");
    
    Выборка = Запрос.Выполнить().Выбрать();
    Если Выборка.Следующий() Тогда
        Возврат Число(Выборка.Цена);
    КонецЕсли;
    
    Возврат 0;
КонецФункции

Функция ПолучитьХарактеристики(СсылкаНоменклатуры)
    Характеристики = Новый Массив;
    
    Запрос = Новый Запрос;
    Запрос.Текст =
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   ОстаткиТоваров.Характеристика.Наименование КАК Характеристика
    |ИЗ
    |   РегистрСведений.ОстаткиТоваров КАК ОстаткиТоваров
    |ГДЕ
    |   ОстаткиТоваров.Номенклатура = &Номенклатура
    |   И ОстаткиТоваров.Количество > 0
    |   И ОстаткиТоваров.Характеристика ЕСТЬ НЕ NULL";
    
    Запрос.УстановитьПараметр("Номенклатура", СсылкаНоменклатуры);
    Выборка = Запрос.Выполнить().Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Характеристики.Добавить(Выборка.Характеристика);
    КонецЦикла;
    
    Возврат Характеристики;
КонецФункции

// Общее
Функция ЧтениеJSON(Данные)
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Данные);
    Возврат ПрочитатьJSON(ЧтениеJSON);
КонецФункции

Функция ЗаписьJSON(Данные)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();

КонецФункции